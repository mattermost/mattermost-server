// DO NOT EDIT, auto generated by struct2interface

package app

import (
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/shared/i18n"
	"github.com/mattermost/mattermost-server/v5/utils"
	"github.com/throttled/throttled"
)

type EmailServiceIface interface {
	// SendMail is
	SendMail(to, subject, htmlBody, ccMail string) error
	// SendRemoveExpiredLicenseEmail formats an email and uses the email service to send the email to user with link pointing to CWS
	// to renew the user license
	SendRemoveExpiredLicenseEmail(email string, locale, siteURL string) *model.AppError
	// SendUpgradeEmail formats an email template and sends an email to an admin specified in the email arg
	SendUpgradeEmail(user, email, locale, siteURL, action string) (bool, *model.AppError)
	AddNotificationEmailToBatch(user *model.User, post *model.Post, team *model.Team) *model.AppError
	CreateVerifyEmailToken(userID string, newEmail string) (*model.Token, *model.AppError)
	ESrv() *Server
	InitEmailBatching()
	NewEmailTemplate(name, locale string) *utils.HTMLTemplate
	PerDayEmailRateLimiter() *throttled.GCRARateLimiter
	PerHourEmailRateLimiter() *throttled.GCRARateLimiter
	RenderBatchedPost(notification *batchedNotification, channel *model.Channel, sender *model.User, siteURL string, displayNameFormat string, translateFunc i18n.TranslateFunc, userLocale string, emailNotificationContentsType string) string
	SendAtUserLimitWarningEmail(email string, locale string, siteURL string) (bool, *model.AppError)
	SendBatchedEmailNotification(userID string, notifications []*batchedNotification)
	SendChangeUsernameEmail(newUsername, email, locale, siteURL string) *model.AppError
	SendDeactivateAccountEmail(email string, locale, siteURL string) *model.AppError
	SendEmailChangeEmail(oldEmail, newEmail, locale, siteURL string) *model.AppError
	SendEmailChangeVerifyEmail(newUserEmail, locale, siteURL, token string) *model.AppError
	SendGuestInviteEmails(team *model.Team, channels []*model.Channel, senderName string, senderUserId string, senderProfileImage []byte, invites []string, siteURL string, message string) *model.AppError
	SendInviteEmails(team *model.Team, senderName string, senderUserId string, invites []string, siteURL string) *model.AppError
	SendMfaChangeEmail(email string, activated bool, locale, siteURL string) *model.AppError
	SendNoCardPaymentFailedEmail(email string, locale string, siteURL string) *model.AppError
	SendNotificationMail(to, subject, htmlBody string) error
	SendOverUserFourteenDayWarningEmail(email string, locale string, siteURL string, overLimitDate string) (bool, *model.AppError)
	SendOverUserLimitNinetyDayWarningEmail(email string, locale string, siteURL string, overLimitDate string) (bool, *model.AppError)
	SendOverUserLimitThirtyDayWarningEmail(email string, locale string, siteURL string) (bool, *model.AppError)
	SendOverUserLimitWarningEmail(email string, locale string, siteURL string) (bool, *model.AppError)
	SendOverUserLimitWorkspaceSuspendedWarningEmail(email string, locale string, siteURL string) (bool, *model.AppError)
	SendOverUserSevenDayWarningEmail(email string, locale string, siteURL string) (bool, *model.AppError)
	SendPasswordChangeEmail(email, method, locale, siteURL string) *model.AppError
	SendPasswordResetEmail(email string, token *model.Token, locale, siteURL string) (bool, *model.AppError)
	SendPaymentFailedEmail(email string, locale string, failedPayment *model.FailedPayment, siteURL string) (bool, *model.AppError)
	SendSignInChangeEmail(email, method, locale, siteURL string) *model.AppError
	SendSuspensionEmailToSupport(email string, installationID string, customerID string, subscriptionID string, siteURL string, userCount int64) (bool, *model.AppError)
	SendUserAccessTokenAddedEmail(email, locale, siteURL string) *model.AppError
	SendVerifyEmail(userEmail, locale, siteURL, token, redirect string) *model.AppError
	SendWelcomeEmail(userID string, email string, verified bool, locale, siteURL, redirect string) *model.AppError
	SetTSendMail(f SendMailFunc)
}
