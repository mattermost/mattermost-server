// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	context "context"

	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// AsyncMigration is an autogenerated mock type for the AsyncMigration type
type AsyncMigration struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *AsyncMigration) Execute(_a0 context.Context, _a1 *sql.Conn) (model.AsyncMigrationStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.AsyncMigrationStatus
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Conn) model.AsyncMigrationStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.AsyncMigrationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Conn) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields:
func (_m *AsyncMigration) GetStatus() (model.AsyncMigrationStatus, error) {
	ret := _m.Called()

	var r0 model.AsyncMigrationStatus
	if rf, ok := ret.Get(0).(func() model.AsyncMigrationStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.AsyncMigrationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *AsyncMigration) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
